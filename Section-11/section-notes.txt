- Introducing Constructor Functinos
    - Behind the scenes, when we create a class, a constructor function is executed.
    - Constructor Functions: Blueprints for Objects
                             Properties & Methods
                             Can be called with new
                             All properties and methods are enumerable
                             Not in strict mode by default
    
    - Classes: Blueprints for Objects
               Properties & Methods
               Must be called with new
               Methods are non-enumerable by default
               Always in strict mode 

    - Constructor Function example:

    function Person() {
        this.age = 30;
        this.name = 'Max';
        this.greet = function() {
            console.log('Hi, I am ' + this.name + ' and I am ' + this.age + ' years old.');
        };
    }

    const person = new Person();
    person.greet();

- Constructor Functinos vs Classes & Understanding "new"

    Obs: The object stored in 'person' constant only exist due to the keyword 'new'. The constructor funcion does not return an object.
         The 'new' keyword, behind the scenes, create an empty object, adds all properties and methods to that empty object and returns it.
         
         function Person() {
            this = {};
            this.age = 30;
            this.name = 'Max';
            this.greet = function() {
                console.log('Hi, I am ' + this.name + ' and I am ' + this.age + ' years old.');
            };
            return this;
        }

- Introducing Prototypes
    - Prototypes are objects that are linked with every object that is instanciated from a class or constructor function.
    - Prototypes can be used as Fallback Objects.
    - When a method is called from an object, the javascript searches the method in the object. If the called method is not in the object, javascript will look for the called method in the prototype.
    - __proto__: Object
    
    - Example:

    function Person() {...} / class Person{...}
    const p = new Person();
    p.breath(); -> Defined in Person itself(i.e. set up in blueprint)?
                    |_ Yes?
                    |_ No? -> p.__proto__.breath(); -> Defined in Person's prototype?
                                                        |_ Yes?
                                                        |_ No? -> p.__proto__.__proto__.breath(); -> Defined in Person's prototype's prototype?
                                                                                                        |_ Continues until Object.prototype
                                            
    Obs:Prototype is almost the same of __proto__.
        __proto__ is linked with every object instantiated.
        Prototype is linked with every class or constructor function that is a blueprint for objects.
        The content of the Prototype is the same of __proto__. But we can use Prototype to create custom __proto__ for objects.
        
        - Example:
        
        function Person() {
            this.age = 30;
            this.name = 'Max';
            this.greet = function() {
                console.log(
                'Hi, I am ' + this.name + ' and I am ' + this.age + ' years old.'
                );
            };
        }

        // This way overwrite the existing prototype
        Person.prototype = {
            printAge() {
                console.log(this.age);
            }
        };

        // This way, append a method to the existing prototype
        Person.prototype.printAge = function() {
            console.log(this.age);
        }

        console.dir(Person);

        const p = new Person();
        p.greet();
        p.printAge();
        console.log(p.__proto__);

    Prototypes - Summary

    Prototypes can be a confusing and tricky topic - that's why it's important to really understand them.
    A prototype is an object (let's call it "P") that is linked to another object (let's call it "O") - it (the prototype object) kind of acts as a "fallback object" to which the other object ("O") can reach out if you try to work with a property or method that's not defined on the object ("O") itself.
    
    EVERY object in JavaScript by default has such a fallback object (i.e. a prototype object) - more on that in the next lectures.

    It can be especially confusing when we look at how you configure the prototype objects for "to be created" objects based on constructor functions (that is done via the '.prototype' property of the constructor function object).

    Consider this example:

    function User() {
        ... // some logic, doesn't matter => configures which properties etc. user objects will have
    }
    
    User.prototype = { age: 30 }; // sets prototype object for "to be created" user objects, NOT for User function object

    The 'User' function here also has a prototype object of course (i.e. a connected fallback object) - but that is NOT the object the 'prototype' property points at. Instead, you access the connected fallback/ prototype object via the special '__proto__' property which EVERY object (remember, functions are objects) has.

    The 'prototype' property does something different: It sets the prototype object, which new objects created with this User constructor function will have.

    That means:

    const userA = new User();
    userA.__proto__ === User.prototype; // true
    userA.__proto__ === User.__proto__ // false




